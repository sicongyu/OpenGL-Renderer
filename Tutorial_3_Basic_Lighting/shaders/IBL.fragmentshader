#version 410 core

#define USE_BLOOM 1

layout (location = 0) out vec4 FragColor;
#if USE_BLOOM
layout (location = 1) out vec4 BrightColor;
#endif
// out vec4 FragColor;

in vec2 UV;
in vec3 WorldPos;
in vec3 WorldNormal;
in vec3 WorldTangent;
// in mat3 TBN;

uniform vec3 CameraPos;

uniform sampler2D albedoMap;
uniform sampler2D normalMap;
uniform sampler2D AOMap;
uniform sampler2D roughnessMap;
uniform sampler2D metallicMap;
uniform samplerCube irradianceMap;
uniform samplerCube prefilterMap;
uniform sampler2D brdfLUT;
uniform vec3 LightPos;

const float PI = 3.14159265359;
const vec3 lightColor = vec3(300.0);

vec3 readNormalMap() {
    vec3 normal = (texture(normalMap, UV) * 2.0 - 1.0).xyz;
    vec3 NormalizedWorldNormal = normalize(WorldNormal);
    vec3 NormalizedWorldTangent = normalize(WorldTangent);
    vec3 WorldBitangent = normalize(cross(NormalizedWorldNormal, NormalizedWorldTangent));
    mat3 TBN = mat3(NormalizedWorldTangent, WorldBitangent, NormalizedWorldNormal);
    return normalize(TBN * normal);
    // return normal;
}

// Fresnel Equation
vec3 fresnelSchlick(float cosTheta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness) {
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);
}

// Normal Distribution Function
float DistributionGGX(vec3 N, vec3 H, float roughness) {
    float a = roughness * roughness;
    float aSquare = a * a;
    float NdotH = max(dot(N, H), 0);
    float denom = PI * pow((NdotH * NdotH * (aSquare - 1) + 1), 2);
    return aSquare / denom;
}

// Schlick-GGX (Combination of GGX and Schlick-Beckmann approximation)
float GeometrySchlickGGX(float NdotV, float k) {
    return NdotV / (NdotV * (1 - k) + k);
}

// Smith's method G(n, v, l, k) = Gsub(n, v, k) * Gsub(n, l, k)
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float k = pow(roughness, 2) / 2.0;
    float GGXsub1 = GeometrySchlickGGX(NdotV, k);
    float GGXsub2 = GeometrySchlickGGX(NdotL, k);
    return GGXsub1 * GGXsub2;
}

void main() {

    // vec3 albedo = pow(texture(albedoMap, UV).rgb, vec3(2.2));
    vec3 albedo = texture(albedoMap, UV).rgb;
    // Normal in tangent space
    vec3 N = readNormalMap();
    // vec3 N = getNormalFromMap();

    // vec3 N = WorldNormal;
    float metallic = texture(metallicMap, UV).r;
    float roughness = texture(roughnessMap, UV).r;
    float ao = texture(AOMap, UV).r;

    vec3 V = normalize(CameraPos - WorldPos);

    vec3 L = normalize(LightPos - WorldPos);
    vec3 H = normalize(V + L);
    vec3 R = reflect(-V, N);

    vec3 F0 = vec3(0.04);
    F0 = mix(F0, albedo, metallic);

    vec3 Lo = vec3(0.0);

    for (int i = 0; i < 1; i++) {
        // Light attenuation
        vec3 LightColor = vec3(1.0);
        float distance = length(LightPos - WorldPos);
        // float attenuation = 1.0 / (distance * distance);
        float attenuation = 1.0;
        vec3 radiance = LightColor * attenuation;

        // DFG
        vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);

        float D = DistributionGGX(N, H, roughness);
        float G = GeometrySmith(N, V, L, roughness);

        // Cook-Torrance Specular BRDF term
        vec3 numerator = D * F * G;
        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);
        vec3 specular = numerator / max(denominator, 0.001);

        // Cook-Torrance Diffuse Term
        vec3 kS = F; // kS is equal to F
        // From LearnOpenGL: multiply kD by the inverse metalness such that only non-metals
        // have diffuse lighting, or a linear blend if partly metal (pure metals
        // have no diffuse light).
        vec3 kD = (vec3(1.0) - kS) * (1.0 - metallic);

        // Cook-Torrance Reflectance Equation
        float NdotL = max(dot(N, L), 0.0);
        Lo += (kD * albedo / PI + specular) * radiance * NdotL;
    }

    // IBL
    vec3 F = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);

    vec3 kS = F;
    vec3 kD = 1.0 - kS;
    vec3 irradiance = texture(irradianceMap, N).rgb;
    vec3 diffuse = irradiance * albedo;

    const float MAX_REFLECTION_LOD = 4.0;
    vec3 prefilteredColor = textureLod(prefilterMap, R,  roughness * MAX_REFLECTION_LOD).rgb;
    vec2 envBRDF  = texture(brdfLUT, vec2(max(dot(N, V), 0.0), roughness)).rg;
    vec3 specular = prefilteredColor * (F * envBRDF.x + envBRDF.y);

    vec3 ambient = (kD * diffuse + specular) * ao;

    vec3 color = ambient + Lo;

#if USE_BLOOM
    float brightness = dot(color.rgb, vec3(0.2126, 0.7152, 0.0722));
    if (brightness > 1.0) {
        BrightColor = vec4(color.rgb, 1.0);
    }
#else
    // HDR mapping
    color = color / (color + vec3(1.0));
    // gamma correction
    color = pow(color, vec3(1.0/2.2));
#endif
    FragColor = vec4(color, 1.0);
}
