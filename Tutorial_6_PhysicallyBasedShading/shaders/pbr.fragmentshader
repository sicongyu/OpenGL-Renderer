#version 410 core
#define float3 vec3
#define saturate(a) clamp(a, 0.0, 1.0)
#define PI										3.14159265358979323846
#define PI_INV									0.31830988618379067154

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_worldspace;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D diffuseTex;
uniform sampler2D roughnessTex;
uniform sampler2D metallicTex;
uniform int modelIndex;

uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform vec3 camera_position;

// pbr
uniform sampler2D IntegrateBRDFSampler;
uniform samplerCube env_map; 
uniform samplerCube env_map_filtered;
uniform float roughness;

vec2 IntegrateBRDF(float Roughness,float NoV ){
	return textureLod(IntegrateBRDFSampler,vec2(Roughness,NoV),0).xy;
}

vec3 PrefilterEnvMap(float Roughness,vec3 R){
	return textureLod(env_map,R,Roughness*5).rgb;
}

vec3 ApproximateSpecularIBL( vec3 SpecularColor, float Roughness, vec3 N, vec3 V )
{
	float NoV = clamp( dot( N, V ),1e-5,1.0 );
	vec3 R = 2 * dot( V, N ) * N - V;
	vec3 PrefilteredColor = PrefilterEnvMap( Roughness, R );
	vec2 EnvBRDF = IntegrateBRDF( Roughness, NoV );

	return PrefilteredColor*( SpecularColor * EnvBRDF.x + EnvBRDF.y );
}

vec3 prefilter_irradiance(vec3 N_world){
	return textureLod(env_map_filtered, N_world, 0.0).rgb;
}

float3 Diffuse_Lambert( float3 DiffuseColor )
{
	return DiffuseColor * PI_INV;
}

float3 EnvShading(float3 DiffuseColor,float3 SpecularColor, float Roughness, float3 V, float3 N){
	float3 diffuse= Diffuse_Lambert(DiffuseColor)*prefilter_irradiance(N);
	float3 specular=ApproximateSpecularIBL(SpecularColor,Roughness,N,V);
	return diffuse+specular;
}

float D_GGX( float Roughness, float NoH )
{
	float a = Roughness * Roughness;
	float a2 = a * a;
	float d = ( NoH * a2 - NoH ) * NoH + 1.0;	
	return a2 / ( PI*d*d );					
}

float Square( float x )
{
	return x*x;
}

float Vis_Schlick_Analytic( float Roughness, float NoV, float NoL )
{
	Roughness=(Roughness+1.0)*0.5;
	float k = Square( Roughness ) * 0.5;
	float Vis_SchlickV = NoV * (1.0 - k) + k;
	float Vis_SchlickL = NoL * (1.0 - k) + k;
	return 0.25 / ( Vis_SchlickV * Vis_SchlickL );
}

float3 F_Schlick( float3 SpecularColor, float VoH )
{
	float Fc = pow( 1.0 - VoH,5.0 );					
	//return Fc + (1 - Fc) * SpecularColor;		
	
	// Anything less than 2% is physically impossible and is instead considered to be shadowing
	return saturate( 50.0 * SpecularColor.g ) * Fc + (1.0 - Fc) * SpecularColor;
	
}

float3 PointLightShading(float3 DiffuseColor,float3 SpecularColor, 
	float Roughness, float3 LightColor, float3 L, float3 V, float3 N)
{

	float3 H = normalize(V + L);
	float NoL = saturate( dot(N, L) );
	if(NoL<=0.0) return vec3(0.0);
	//float NoV = saturate( dot(N, V) );
	float NoV = max( dot(N, V), 1e-5 );	// constant to prevent NaN
	float NoH = saturate( dot(N, H) );
	float VoH = saturate( dot(V, H) );
	
	// Generalized microfacet specular
	float D = D_GGX( Roughness, NoH );
	float Vis = Vis_Schlick_Analytic( Roughness, NoV, NoL );
	float3 F = F_Schlick( SpecularColor, VoH );

	float3 fd = Diffuse_Lambert( DiffuseColor );
	float3 fr= D*F*Vis;

	return (fr+fd)*LightColor*NoL;

}

void main(){

	// Material properties
	vec3 MaterialDiffuseColor = texture( diffuseTex, UV ).rgb;

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_worldspace );
	vec3 v = normalize(camera_position - Position_worldspace);

	float metalness = 1.0f;
	float roughness_ = roughness;

	if(modelIndex == 0) // shaver
	{
		roughness_ = texture(roughnessTex, UV).r;
		metalness = texture(metallicTex, UV).r;
	}
	else if(modelIndex == 3) // spheres
		MaterialDiffuseColor = vec3(1.0f);

	vec3 diffuse = mix(MaterialDiffuseColor , vec3(0.0),metalness);
	vec3 specular = mix(vec3(0.04),MaterialDiffuseColor , metalness);

	// environment light
	color = EnvShading(diffuse, specular, roughness_, v, n);

	// point light
	if(modelIndex != 0)
	{
		vec3 lightColor = vec3(1, 1, 1);
		vec3 lightPosition = vec3(5, 5, -5);
		vec3 l = normalize(lightPosition - Position_worldspace);
		color += PointLightShading(diffuse, specular, roughness_, lightColor, l, v, n);
	}

	// gamma correction
	color = pow(color,vec3(0.45));

}