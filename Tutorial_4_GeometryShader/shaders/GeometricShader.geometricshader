#version 410 core

layout(triangles) in;
layout (triangle_strip, max_vertices=3) out;
 
in VertexData {
   	vec2 vertexUV;
	vec3 vertexNormal_modelspace;
} VertexIn[3];
 
out VertexData {
    vec2 UV;
	vec3 Position_worldspace;
	vec3 Normal_cameraspace;
	vec3 EyeDirection_cameraspace;
	vec3 LightDirection_cameraspace;
} VertexOut;
 
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform vec3 LightPosition_worldspace;

uniform float dist;
 
 void main()
{
  for(int i = 0; i < gl_in.length(); i++)
  {
     // copy attributes
	vec4 local_position = gl_in[i].gl_Position + dist * vec4(VertexIn[i].vertexNormal_modelspace,0);
	 
    gl_Position = MVP * local_position;
    // Output position of the vertex, in clip space : MVP * position
	//gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	
	// Position of the vertex, in worldspace : M * position
	VertexOut.Position_worldspace = (M * local_position).xyz;
	
	// Vector that goes from the vertex to the camera, in camera space.
	// In camera space, the camera is at the origin (0,0,0).
	vec3 vertexPosition_cameraspace = ( V * M * local_position).xyz;
	VertexOut.EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

	// Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
	vec3 LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace,1)).xyz;
	VertexOut.LightDirection_cameraspace = LightPosition_cameraspace + VertexOut.EyeDirection_cameraspace;
	
	// Normal of the the vertex, in camera space
	VertexOut.Normal_cameraspace = ( V * M * vec4(VertexIn[i].vertexNormal_modelspace,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
	
	// UV of the vertex. No special space for this one.
	VertexOut.UV = VertexIn[i].vertexUV;
 
    // done with the vertex
    EmitVertex();
  }
}