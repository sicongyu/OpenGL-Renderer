#version 410 core

// Interpolated values from the vertex shaders
in VertexData {
    vec2 UV;
	vec3 Position_worldspace;
	vec3 Normal;
	vec3 vertexBinormal;
	vec3 vertexTangent;
} VertexIn;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myNormal;
uniform sampler2D myTextureSampler;
uniform vec3 LightPosition_worldspace;
uniform vec3 camera_position;

void main(){

	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 30.0f;
	
	// Material properties
	vec3 MaterialDiffuseColor = texture( myTextureSampler, VertexIn.UV ).rgb;
	vec3 MaterialAmbientColor = vec3(0.2,0.2,0.2) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.2,0.2,0.2);

	vec3  new_normal = texture(myNormal,VertexIn.UV ).rgb;
	new_normal = new_normal * 2.0f - 1.0f;
	vec3  B = normalize(VertexIn.vertexBinormal);
	vec3  T = normalize(VertexIn.vertexTangent); 
	vec3 n = normalize( VertexIn.Normal );
	
	mat3 TBN =transpose( mat3(
		T,
		B,
		n	
	)); // You can use dot products instead of building this matrix and transposing it. See References for details.
	vec3 new_normal_w = TBN * new_normal;
	// Distance to the light
	float distance = length( LightPosition_worldspace - VertexIn.Position_worldspace );
	
	n = normalize(new_normal_w);
	// Normal of the computed fragment, in camera space
		// Eye vector (towards the camera)
	vec3 E = normalize( camera_position-VertexIn.Position_worldspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize(LightPosition_worldspace + E );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	

	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	
	color = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * LightColor * 50 * cosTheta/(distance*distance) +
		// Specular : reflective highlight, like a mirror
		MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,2) / (distance*distance);
	 //color =  vec3(VertexIn.Position_worldspace.x);
}