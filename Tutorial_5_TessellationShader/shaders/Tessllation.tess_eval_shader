#version 410 core
layout(triangles, equal_spacing, cw) in;

in VertexData
{
	vec3 vertexPosition_modelspace;
	vec2 vertexUV;
	vec3 vertexNormal_modelspace;
	vec3 vertexBinormal_modelspace;
	vec3 vertexTangent_modelspace;

}Vertexin[];


out VertexData
{
    vec2 UV;
	vec3 Position_worldspace;
	vec3 Normal;
	vec3 vertexBinormal;
	vec3 vertexTangent;

}VertexOut;

uniform mat4 MVP;
uniform sampler2D mydisplace;
uniform float scale;
uniform float dis;



vec2 interpolate2D(vec2 v0,vec2 v1,vec2 v2)
{
	 return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0,vec3 v1,vec3 v2)
{
	 return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}



void main()
{
	VertexOut.UV = interpolate2D(Vertexin[0].vertexUV,Vertexin[1].vertexUV,Vertexin[2].vertexUV);
	vec3 Normal= interpolate3D(Vertexin[0].vertexNormal_modelspace,Vertexin[1].vertexNormal_modelspace,Vertexin[2].vertexNormal_modelspace);
	VertexOut.vertexBinormal = interpolate3D(Vertexin[0].vertexBinormal_modelspace,Vertexin[1].vertexBinormal_modelspace,Vertexin[2].vertexBinormal_modelspace);
	VertexOut.vertexTangent = interpolate3D(Vertexin[0].vertexTangent_modelspace,Vertexin[1].vertexTangent_modelspace,Vertexin[2].vertexTangent_modelspace);
	vec3 pos = interpolate3D(Vertexin[0].vertexPosition_modelspace,Vertexin[1].vertexPosition_modelspace,Vertexin[2].vertexPosition_modelspace);

	Normal = normalize(Normal);
	VertexOut.Normal = Normal;

	float displace = texture(mydisplace,VertexOut.UV).r;

	pos += Normal * (displace-dis) *scale;
	VertexOut.Position_worldspace = pos;
	gl_Position = MVP*vec4(pos,1.0);




}
