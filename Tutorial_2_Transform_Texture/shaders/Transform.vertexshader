#version 410 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;

// Output data ; will be interpolated for each fragment.
out vec2 UV;

// Values that stay constant for the whole mesh.
uniform mat4 V;
uniform mat4 P;
uniform vec3 theta;

void main(){

	vec3 angles = radians( theta );
	vec3 c = cos( angles );
    vec3 s = sin( angles );

    // Remeber: thse matrices are column-major
	mat4 rx = mat4( 1.0,  0.0,  0.0, 0.0,
 		    0.0,  c.x,  s.x, 0.0,
 		    0.0, -s.x,  c.x, 0.0,
 		    0.0,  0.0,  0.0, 1.0 );

    mat4 ry = mat4( c.y, 0.0, -s.y, 0.0,
 		    0.0, 1.0,  0.0, 0.0,
 		    s.y, 0.0,  c.y, 0.0,
 		    0.0, 0.0,  0.0, 1.0 );

    mat4 rz = mat4( c.z, -s.z, 0.0, 0.0,
 		    s.z,  c.z, 0.0, 0.0,
 		    0.0,  0.0, 1.0, 0.0,
 		    0.0,  0.0, 0.0, 1.0 );

    // Workaround for bug in ATI driver
    rz[2][2] = 1.0;
	mat4 M = rz * ry * rx;
	 
	vec4 pos =  V * M * vec4(vertexPosition_modelspace,1);
	gl_Position = P* pos;
	
	// UV of the vertex. No special space for this one.
	UV = vertexUV;
}

